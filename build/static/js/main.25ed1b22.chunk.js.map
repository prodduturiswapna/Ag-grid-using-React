{"version":3,"sources":["lib/NumberFormatter.js","lib/NumericEditor.js","lib/RangeFilter.js","App.js","lib/registerServiceWorker.js","index.js"],"names":["NumberFormatter","_Component","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","text","Number","this","props","toLocaleString","undefined","style","currency","_jsx","children","Component","NumericCellEditor","_this","call","textInput","React","createRef","event","test","isNumeric","nativeEvent","preventDefault","keyCode","stopPropagation","current","focus","addEventListener","onKeyDown","onKeyPress","ref","defaultValue","RangeFilter","input","state","filter","valueGetter","onSubmit","bind","_assertThisInitialized","params","split","gt","lt","node","model","setState","_this2","target","elements","filterChangedCallback","_jsxs","name","App","rowData","fetch","then","result","json","className","height","width","AgGridReact","defaultColDef","sortable","resizable","editable","animateRows","pagination","frameworkComponents","numberFormatter","numericCellEditor","rangeFilter","AgGridColumn","field","headerHeight","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","concat","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.25ed1b22.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport class NumberFormatter extends Component {\n    render() {\n        const value = Number(this.props.value);\n        const text = value.toLocaleString(undefined, {style: 'currency', currency: 'EUR'});\n\n        return (\n            <span>{text}</span>\n        )\n    }\n}","import React, { Component } from 'react';\n\nexport class NumericCellEditor extends Component {\n    constructor(props) {\n        super(props);\n        this.textInput = React.createRef();\n    }\n\n    onKeyPress(event) {\n        if (!isNumeric(event.nativeEvent)) {\n            event.preventDefault();\n        }\n\n        function isNumeric(event) {\n            return /\\d/.test(event.key);\n        }\n    }\n\n    onKeyDown(event) {\n        if (event.keyCode === 39 || event.keyCode === 37) {\n            event.stopPropagation();\n        }\n    }\n\n    afterGuiAttached() {\n        if (this.textInput) this.textInput.current.focus();\n    };\n\n    getValue() {\n        return this.textInput.current.value;\n    };\n\n    componentDidMount() {\n        this.textInput.current.addEventListener('keydown', this.onKeyDown);\n    }\n\n    render() {\n        return (\n            <input onKeyPress={this.onKeyPress} ref={this.textInput} defaultValue={this.props.value}/>\n        );\n    }\n}","import React, { Component } from 'react';\n\nexport class RangeFilter extends Component {\n    constructor(props) {\n        super(props);\n\n        this.input = React.createRef();\n\n        this.state = {\n            filter: ''\n        };\n\n        this.valueGetter = this.props.valueGetter;\n\n        this.onSubmit = this.onSubmit.bind(this);\n    }\n\n    isFilterActive() {\n        return this.state.filter !== '';\n    }\n\n    doesFilterPass(params) {\n        const filter = this.state.filter.split('-');\n        const gt = Number(filter[0]);\n        const lt = Number(filter[1]);\n        const value = this.valueGetter(params.node);\n\n        return value >= gt && value <= lt;\n    }\n\n    getModel() {\n        return {filter: this.state.filter};\n    }\n\n    setModel(model) {\n        const filter = model ? model.filter : '';\n        this.setState({filter: filter});\n    }\n\n    afterGuiAttached(params) {\n        this.input.current.focus();\n    }\n\n    onSubmit(event) {\n        event.preventDefault();\n\n        let filter = event.target.elements.filter.value;\n\n        if (this.state.filter !== filter) {\n            this.setState({filter: filter}, () => {\n                this.props.filterChangedCallback();\n            });\n        }\n    }\n\n    render() {\n        return (\n            <div>\n            <form onSubmit={this.onSubmit}>\n                <input name=\"filter\" ref={this.input} defaultValue={this.state.filter}/>\n                <button>Apply</button>\n            </form>\n            </div>\n        );\n    }\n}","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport { AgGridReact, AgGridColumn } from \"ag-grid-react\";\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-balham.css\";\n\n\nimport { NumberFormatter } from \"./lib/NumberFormatter\";\nimport { NumericCellEditor } from \"./lib/NumericEditor\";\nimport { RangeFilter } from \"./lib/RangeFilter\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      rowData: [],\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://www.ag-grid.com/example-assets/row-data.json\")\n      .then((result) => result.json())\n      .then((rowData) => this.setState({ rowData }));\n  }\n\n  render() {\n    return (\n      <div\n        className=\"ag-theme-balham\"\n        style={{ height: \"400px\", width: \"1200px\" }}\n\n      >\n\n        <AgGridReact\n          defaultColDef={{ sortable: true, filter: true ,resizable:true, editable:true, animateRows:true}}\n          pagination={true}\n          \n          frameworkComponents={{\n            numberFormatter: NumberFormatter,\n            numericCellEditor: NumericCellEditor,\n            rangeFilter: RangeFilter,\n          }}\n          rowData={this.state.rowData}\n        >\n          <AgGridColumn field=\"make\" width=\"400\" headerHeight = \"150\"></AgGridColumn>\n          <AgGridColumn field=\"model\" width=\"400\" ></AgGridColumn>\n          <AgGridColumn field=\"price\" width=\"400\"  ></AgGridColumn>\n          {/* // editable= {true}\n                    // cellRenderer= 'numberFormatter'\n                    // cellEditor= 'numericCellEditor'\n                    // filter= 'rangeFilter' */}\n        </AgGridReact>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './lib/registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}